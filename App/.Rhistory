geom_point_interactive() + # Interactive points
scale_x_continuous(breaks = seq(min(employment_data$year), max(employment_data$year), by = 1)) + # Show all years
ggtitle("Employment Trend by Gender") +
theme_classic() +
theme(legend.position = "bottom")
# Render the interactive plot
girafe_plot <- girafe(
ggobj = line_chart,
width_svg = 8,
height_svg = 4,
options = list(
opts_hover(css = "stroke-width: 3; cursor: pointer;"), # Highlight hovered elements
opts_selection(type = "single", css = "opacity: 0.2;"), # Single selection with unselected dimming
opts_tooltip(css = "background-color: white; color: black; font-size: 14px; padding: 5px;") # Tooltip styling
)
)
# Display the interactive plot
girafe_plot
# 1. Load packages----
pacman::p_load(sf,
ggplot2,
shiny,
leaflet,
leaflet.extras2,
plotly,
dplyr,
tidyr,
gganimate,
lubridate,
shinydashboard,
shinyjs,
shinythemes,
shinyWidgets,
shinycssloaders,
RColorBrewer,
gridGraphics,
ggiraph,
gghighlight,
shinyjs,
girafe,
viridis)
region_map <- employment_data |>
group_by(year, region) |>
summarise(total_employed = sum(num_employed, na.rm = TRUE)) |>
ungroup()
head(region_map)
head(employment_data)
str(employment_data)
region_map <- employment_data |>
group_by(year, region) |>
summarise(total_employed = sum(num_employed, na.rm = TRUE)) |>
ungroup()
str(refion_data)
str(region_data)
str(region_map)
# Prepare the data for Leaflet
region_map <- employment_data |>
group_by(year, region) |>
summarise(
total_employed = sum(num_employed, na.rm = TRUE),
geometry = st_union(geometry) # Combine geometries by region and year
) |>
ungroup() |>
st_as_sf() # Ensure it is an sf object
# Define color palettes
palette1 <- colorNumeric(
palette = "YlOrRd",
domain = region_map$total_employed
)
palette2 <- colorFactor(
palette = c("blue", "green"),
domain = region_map$region
)
# Prepare the data for Leaflet
region_map <- employment_data |>
group_by(year, region, nuts_name) |>
summarise(
total_employed = sum(num_employed, na.rm = TRUE),
geometry = st_union(geometry) # Combine geometries by region and year
) |>
ungroup() |>
st_as_sf() # Ensure it is an sf object
# Define color palettes
palette1 <- colorNumeric(
palette = "YlOrRd",
domain = region_map$total_employed
)
palette2 <- colorFactor(
palette = c("blue", "green"),
domain = region_map$region
)
# Create the Leaflet map
map1 <- leaflet(region_map) |>
addTiles() |>  # Add a base map layer
addPolygons(
color = ~region_palette(region), # Color by region type (Rural/Urban)
fillColor = ~employment_palette(total_employed), # Fill color by employment figures
weight = 1,
opacity = 1,
fillOpacity = 0.8,
popup = ~paste(
"<b>Name:</b>", nuts_name, "<br>"
"<b>Region:</b>", region, "<br>",
# Create the Leaflet map
map1 <- leaflet(region_map) |>
addTiles() |>  # Add a base map layer
addPolygons(
color = ~region_palette(region), # Color by region type (Rural/Urban)
fillColor = ~employment_palette(total_employed), # Fill color by employment figures
weight = 1,
opacity = 1,
fillOpacity = 0.8,
popup = ~paste(
"<b>Name:</b>", nuts_name, "<br>",
"<b>Region:</b>", region, "<br>",
"<b>Total Employed:</b>", total_employed, "<br>",
"<b>Year:</b>", year
)
) |>
addLegend(
position = "bottomright",
pal = employment_palette,
values = ~total_employed,
title = "Employment Figures",
opacity = 1
) |>
addLegend(
position = "bottomleft",
pal = region_palette,
values = ~region,
title = "Region Type",
opacity = 1
) |>
addTimeslider(
data = region_map,
group = "year",
timeAttribute = "year",
label = ~paste("Year:", year),
sliderOptions = list(start = min(region_map$year), end = max(region_map$year), step = 1)
)
# Create the Leaflet map
map1 <- leaflet(region_map) |>
addTiles() |>  # Add a base map layer
addPolygons(
color = ~region_palette(region), # Color by region type (Rural/Urban)
fillColor = ~employment_palette(total_employed), # Fill color by employment figures
weight = 1,
opacity = 1,
fillOpacity = 0.8,
popup = ~paste(
"<b>Name:</b>", nuts_name, "<br>",
"<b>Region:</b>", region, "<br>",
"<b>Total Employed:</b>", total_employed, "<br>",
"<b>Year:</b>", year
)
) |>
addLegend(
position = "bottomright",
pal = employment_palette,
values = ~total_employed,
title = "Employment Figures",
opacity = 1
) |>
addLegend(
position = "bottomleft",
pal = region_palette,
values = ~region,
title = "Region Type",
opacity = 1
) |>
addLayersControl(
overlayGroups = as.character(unique(region_map$year)), # Add layers for each year
options = layersControlOptions(collapsed = FALSE)
) |>
addTimeSlider(
time = ~year, # Use the year for the time slider
timeInterval = "year", # Step through one year at a time
label = ~paste("Year:", year)
)
install.packages("leaflet.extras")
# Create the Leaflet map
map1 <- leaflet(region_map) |>
addTiles() |>  # Add a base map layer
addPolygons(
color = ~region_palette(region), # Color by region type (Rural/Urban)
fillColor = ~employment_palette(total_employed), # Fill color by employment figures
weight = 1,
opacity = 1,
fillOpacity = 0.8,
popup = ~paste(
"<b>Name:</b>", nuts_name, "<br>",
"<b>Region:</b>", region, "<br>",
"<b>Total Employed:</b>", total_employed, "<br>",
"<b>Year:</b>", year
)
) |>
addLegend(
position = "bottomright",
pal = employment_palette,
values = ~total_employed,
title = "Employment Figures",
opacity = 1
) |>
addLegend(
position = "bottomleft",
pal = region_palette,
values = ~region,
title = "Region Type",
opacity = 1
) |>
addLayersControl(
overlayGroups = as.character(unique(region_map$year)), # Add layers for each year
options = layersControlOptions(collapsed = FALSE)
) |>
addTimeSlider(
time = ~year, # Use the year for the time slider
timeInterval = "year", # Step through one year at a time
label = ~paste("Year:", year)
)
# Create the Leaflet map
map1 <- leaflet(region_map) |>
addTiles() |>  # Add a base map layer
addPolygons(
color = ~region_palette(region), # Color by region type (Rural/Urban)
fillColor = ~employment_palette(total_employed), # Fill color by employment figures
weight = 1,
opacity = 1,
fillOpacity = 0.8,
popup = ~paste(
"<b>Name:</b>", nuts_name, "<br>",
"<b>Region:</b>", region, "<br>",
"<b>Total Employed:</b>", total_employed, "<br>",
"<b>Year:</b>", year
)
) |>
addLegend(
position = "bottomright",
pal = employment_palette,
values = ~total_employed,
title = "Employment Figures",
opacity = 1
) |>
addLegend(
position = "bottomleft",
pal = region_palette,
values = ~region,
title = "Region Type",
opacity = 1
) |>
addLayersControl(
overlayGroups = as.character(unique(region_map$year)), # Add layers for each year
options = layersControlOptions(collapsed = FALSE)
) |>
addSliderTime(
layerId = "slider",
timeAttribute = "year", # Time slider based on the year column
timeInterval = 1, # Set time interval to 1 year
startTime = min(region_map$year), # Starting year
endTime = max(region_map$year), # Ending year
sliderWidth = 400 # Customize slider width
)
# Summarize employment data by year, region, and nuts_name
region_map <- employment_data |>
group_by(year, region, nuts_name)  |>
summarise(total_employed = sum(num_employed, na.rm = TRUE)) |>
ungroup()
# Define color palettes
employment_palette <- scale_fill_gradientn(
colors = c("yellow", "orange", "red"),
values = scales::rescale(region_map$total_employed)
)
region_palette <- scale_color_manual(
values = c("blue", "green")
)
# Create the ggplot object with facets for year and interactive tooltips
ggplot_interactive <- ggplot(region_map, aes(x = nuts_name, y = total_employed, fill = total_employed, color = region)) +
geom_bar(stat = "identity", aes(tooltip = paste("Region:", region, "<br>Nuts Name:", nuts_name, "<br>Year:", year, "<br>Total Employed:", total_employed))) +
facet_wrap(~ year) +  # Facet by year
ggtitle("Employment by Region and Year") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
employment_palette +  # Color by employment numbers
region_palette +  # Color by region type
labs(x = "Region Name", y = "Total Employed")
# Render the plot as an interactive girafe object
girafe_plot <- girafe(
ggobj = ggplot_interactive,
width_svg = 10,
height_svg = 6,
options = list(
opts_hover(css = "stroke-width: 3; cursor: pointer;"),  # Hover effect
opts_tooltip(css = "background-color: white; color: black; font-size: 14px; padding: 5px;")  # Tooltip styling
)
)
# Display the interactive plot
girafe_plot
#map----
# Summarize the spatial data by year, region, and nuts_name
region_map <- employment_data |>
group_by(year, region, nuts_name) |>
summarise(
total_employed = sum(num_employed, na.rm = TRUE),
geometry = st_union(geometry) # Combine geometries by region and year
) |>
ungroup() |>
st_as_sf() # Ensure it's an sf object
# Define color palettes
employment_palette <- scale_fill_gradientn(
colors = c("yellow", "orange", "red"),
values = scales::rescale(region_map$total_employed)
)
region_palette <- scale_color_manual(
values = c("blue", "green")
)
# Create the ggplot object with interactive map (geom_sf)
ggplot_interactive <- ggplot(region_map, aes(fill = total_employed, color = region)) +
geom_sf(aes(tooltip = paste("Region:", region, "<br>Nuts Name:", nuts_name, "<br>Year:", year, "<br>Total Employed:", total_employed))) +
facet_wrap(~ year) +  # Facet by year
ggtitle("Employment by Region and Year") +
theme_minimal() +
theme(legend.position = "bottom") +
employment_palette +  # Fill color based on employment figures
region_palette +  # Color based on region type (Urban/Rural)
labs(x = "Longitude", y = "Latitude")
# Render the plot as an interactive girafe object
girafe_plot <- girafe(
ggobj = ggplot_interactive,
width_svg = 10,
height_svg = 6,
options = list(
opts_hover(css = "stroke-width: 3; cursor: pointer;"),  # Hover effect
opts_tooltip(css = "background-color: white; color: black; font-size: 14px; padding: 5px;")  # Tooltip styling
)
)
# Display the interactive plot
girafe_plot
# Create the ggplot object with interactive map (geom_sf)
ggplot_interactive <- ggplot(region_map, aes(fill = total_employed, color = region)) +
geom_sf(aes(tooltip = paste("Region:", region, "<br>Nuts Name:", nuts_name, "<br>Year:", year, "<br>Total Employed:", total_employed))) +
#facet_wrap(~ year) +  # Facet by year
ggtitle("Employment by Region and Year") +
theme_minimal() +
theme(legend.position = "bottom") +
employment_palette +  # Fill color based on employment figures
region_palette +  # Color based on region type (Urban/Rural)
labs(x = "Longitude", y = "Latitude")
# Render the plot as an interactive girafe object
girafe_plot <- girafe(
ggobj = ggplot_interactive,
width_svg = 10,
height_svg = 6,
options = list(
opts_hover(css = "stroke-width: 3; cursor: pointer;"),  # Hover effect
opts_tooltip(css = "background-color: white; color: black; font-size: 14px; padding: 5px;")  # Tooltip styling
)
)
# Display the interactive plot
girafe_plot
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
head(employment_data)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# 3. Data manipulation ----
# Preprocess the employment data: converting year to integer and gender to factor
employment_data <- employment_data |>
mutate(year = as.integer(year),
gender = factor(gender, levels = c("Male", "Female", "total")),
region = factor(region, levels = c("Rural","Urban")),
year_date = as.Date(year_date))
gender_map <- employment_data |>
group_by(year, nuts_name, gender, region) |>
summarise(
total_employed = sum(num_employed, na.rm = TRUE),
geometry = st_union(geometry) # Combine geometries by region and year
) |>
ungroup() |>
st_as_sf()
region_map <- employment_data |>
group_by(year, region, nuts_name) |>
summarise(
total_employed = sum(num_employed, na.rm = TRUE),
geometry = st_union(geometry) # Combine geometries by region and year
) |>
ungroup() |>
st_as_sf()
head(employment_data)
# 3. Data manipulation ----
# Preprocess the employment data: converting year to integer and gender to factor
employment_data <- employment_data |>
mutate(year = as.integer(year),
gender = factor(gender, levels = c("Male", "Female", "total")),
region = factor(region, levels = c("Rural","Urban")),
year_date = as.Date(year_date))
region_map <- employment_data |>
group_by(year, region, nuts_name) |>
summarise(
total_employed = sum(num_employed, na.rm = TRUE),
geometry = st_union(geometry) # Combine geometries by region and year
) |>
ungroup() |>
st_as_sf()
gender_map <- employment_data |>
group_by(year, nuts_name, gender, region) |>
summarise(
total_employed = sum(num_employed, na.rm = TRUE),
geometry = st_union(geometry) # Combine geometries by region and year
) |>
ungroup() |>
st_as_sf()
str(employment_data)
str(region_map)
str(gender_map)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
gender_map <- employment_data |>
group_by(year, nuts_name, gender, region) |>
summarise(
total_employed = sum(num_employed, na.rm = TRUE),
geometry = st_union(geometry) # Combine geometries by region and year
) |>
ungroup() |>
st_as_sf()
# 3. Data manipulation ----
# Preprocess the employment data: converting year to integer and gender to factor
employment_data <- employment_data |>
mutate(year = as.integer(year),
gender = factor(gender, levels = c("Male", "Female", "Total")),
region = factor(region, levels = c("Rural","Urban")),
year_date = as.Date(year_date))
## Request data from WFS ----
wfs_url <- "https://geoserver22s.zgis.at/geoserver/IPSDI_WT24/wfs?"
wfs_request <- paste0(
wfs_url,
"?service=WFS",
"&version=1.0.0",
"&request=GetFeature",
"&typeName=IPSDI_WT24:austria_employment_data_DEFGA",
"&outputFormat=application/json"
)
# Read the Data from WFS
employment_data <- st_read(dsn = wfs_request, quiet = FALSE)
# 3. Data manipulation ----
# Preprocess the employment data: converting year to integer and gender to factor
employment_data <- employment_data |>
mutate(year = as.integer(year),
gender = factor(gender, levels = c("Male", "Female", "total")),
region = factor(region, levels = c("Rural","Urban")),
year_date = as.Date(year_date))
levels(employment_data$gender)
gender_map <- employment_data |>
group_by(year, nuts_name, gender, region) |>
summarise(
total_employed = sum(num_employed, na.rm = TRUE),
geometry = st_union(geometry) # Combine geometries by region and year
) |>
ungroup() |>
st_as_sf()
levels(gender_map$gender)
runApp()
runApp()
# breaks
quantiles1 <- quantile(region_map$total_employed, probs = c(0, 0.2, 0.4, 0.6, 0.8, 1))
runApp()
quantiles1
runApp()
runApp()
runApp()
View(region_map)
runApp()
runApp()
View(gender_map)
runApp()
runApp()
runApp()
